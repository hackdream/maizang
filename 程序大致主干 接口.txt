1 程序运行时 在CMaizangDlg::CMaizangDlg(CWnd* pParent /*=NULL*/) 中做了端口号套接字等的初始化
2 之后进入BOOL CMaizangDlg::OnInitDialog() 做主界面的一些初始化 之后调用StartListen(m_ListenPort);  开启监听
3 StartListen 线程开启监听的过程中调用ThreadAccept线程实现套接字的初始化 绑定 监听 连接(TCP socket)  去处理被控端主机的上线工作(创建AcceptSocket线程)
 StartListen 还将 创建上线主机检测线程(心跳包 看已经上线的主机是否还有心跳) 
4 至此 各主机已经上线

5  AcceptSocket线程很重要  它处理被控端发送的消息  用来判断是 连接消息 对文件处理请求的回应  对视频监控请求的回应  对屏幕监空的回应 等消息 并对这些消息进行处理
我们每个人都要对这个线程进行操作  而尽量不去修改主界面其他地方  
通常
我们会用switch case 判断消息的种类  然后去调用一个函数去创建窗口或做别的  或者直接在case后创建窗口或做别的  这里就是我们所说的接口 一个用来处理向被控端发送请求后收到的回应进行处理的接口
另外每个人 在接口  void CMaizangDlg::OnOnlineFlie()//文件管理  这种类型的函数中进行向客户端发送请求  






大家要遵守的东东：

1  接口

每个人的3个接口

发送请求的接口：
类似 
void CMaizangDlg::OnOnlineFlie()//文件管理  
这种类型的函数中进行向客户端发送请求  

接受请求回应的接口：
AcceptSocket线程 中的switch case 判断 然后直接在case后处理 或者case后调用一个函数进行处理 

其它的尽量不去修改主界面  如果修改要提前通知他人  并做备份 以及文本记录

接口3：
也算是接口吧  就是建立自己的模块窗口 类什么的    
2

重要的函数 ShowMessage   自定义函数    用来在主机上线信息栏插入一行显示主机上线的信息 以及软件初始化等信息   想要再上线信息栏添加任何语句都调用它既可

3
(TCP)socket消息发送接受的时候要按照一定的格式 我定为：

//消息头
typedef struct tagMsgHead
{
	DWORD dwCmd;
	DWORD dwSize;//小于等于0 表示无消息主体  只发送命令头 大于0 说明还有其它消息体要发送  
	DWORD dwExtend1;//附加信息1 暂留
	DWORD dwExtend2;//附加信息2 暂留不用
}MsgHead,*LPMsgHead;


消息头 和消息体    消息头用来判断是什么命令该怎么处理消息      消息体用来传输消息

比如一个请求查询磁盘命令 我们只需发送消息头无消息体  被控端返回的时候我们收到一个消息头(表示是之前请求的回应)和一个消息体 我们根据这个回应 用switch case进行判断如何处理我们的消息体
我们发送接收消息的时候只需要 调用 RecvMsg    SendMsg 这2个函数 这2个函数都声明在command.h 定义在 command.cpp

另外我们需要在command.h中添加自定义的命令 这可以认为是第3个接口  我们可以在这里添加命令    不过一定要记录添加了什么  不然合并的时候会混乱的





大家尽量不要修改编译环境的配置选项 因为修改了之后很可能影响其它地方 影响他人 如果修改要记得记录 告诉别人  大家都修改试过且无措再修改


需要了解的：

1  有些功能我还没添加函数   就是说 如果谁去做某个功能谁添加这个功能的接口  我没添加(添加建立模块窗口的代码)  窗口需要自己定义自己添加 不过要记录下来

2  目前主要代码 在MaizangDlg.cpp 中 我已经注释好了  看懂应该没问题  详细细节没必要看懂 
   TrueColorToolBar.cpp 处理工具条的 真彩工具条   这是我从网上下载的 直接封装好的  可以直接用 如果你的程序后面要用到工具条 要记得调用它 
   FileManage.cpp  是进行文件处理的   可以看看这个文件中关于消息传输的东西 使用其中的传输数据的方式以及文件窗口的创建工程  其它的可浏览过去就行了 
   Command.cpp  其中是一些函数 用来规范我们发送接收消息的方式  注意这是TCP 如果是要用UDP 要自己写了啊  不过写UDP也建议这样写到一个单独文件中 如果封装成类   应该更好吧？


